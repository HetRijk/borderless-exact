import * as TokenProvider from 'refresh-token';
/*
  TokenWrapper class

  Allows the automatic refreshing of tokens via the refresh-token library. All arguments are
  mandatory, and the general workflow is as follows: construct -> initialise once refresh token is
  available -> pass callback to getToken.

  Because of timing issues and potential race conditions, it is advisable to use tokens generated by
  getToken as soon as possible; this minimises the probability of using a stale token.
 */
export default class TokenWrapper {
  constructor(tokenURL: string, clientID: string, clientSecret: string) {
    this._tokenURL = tokenURL;
    this._clientID = clientID;
    this._clientSecret = clientSecret;
    this._initialised = false;
  }

  public initialise(refreshToken: string) {
    if (this._initialised) {
      throw new Error('Double initialised TokenWrapper!');
    }
    this._initialised = true;
    this._tokenProvider = new TokenProvider(this._tokenURL, {
      refresh_token: refreshToken,
      client_id:     this._clientID,
      client_secret: this._clientSecret,
    });
  }

  public getTokenPromise() {
    return new Promise((resolve, reject) => {
      const wrapCallback = (err: any, token: string) => {
        if (err) {
          reject(err);
        } else {
          resolve(token);
        }
      };
      return this.getToken(wrapCallback);
    });
  }

  public getToken( callback: ((err: any, token: string) => any)) {
    if (!this._initialised) {
      throw new Error('Trying to get token from uninitialised TokenWrapper');
    }
    this._tokenProvider.getToken(callback);
  }

  private _authURL: string;
  private _tokenURL: string;
  private _clientID: string;
  private _clientSecret: string;

  private _initialised: boolean;
  private _tokenProvider: TokenProvider;
}
